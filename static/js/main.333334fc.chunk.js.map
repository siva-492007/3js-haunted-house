{"version":3,"sources":["Components/HauntedHouse.js","App.js","reportWebVitals.js","index.js"],"names":["HauntedHouse","canvas","document","querySelector","gui","dat","GUI","hide","cursor","x","y","sizes","width","window","innerWidth","height","innerHeight","addEventListener","event","clientX","clientY","scene","THREE","textureLoader","doorColorTexture","load","doorAlphaTexture","doorAmbientOcclusionTexture","doorHeightTexture","doorNormalTexture","doorMetalnessTexture","doorRoughnessTexture","brickColorTexture","brickAmbientOcclusionTexture","brickNormalTexture","brickRoughnessTexture","grassColorTexture","grassAmbientOcclusionTexture","grassNormalTexture","grassRoughnessTexture","wrapS","wrapT","repeat","set","house","add","walls","map","aoMap","normalMap","roughnessMap","geometry","setAttribute","attributes","uv","array","position","roof","color","rotation","Math","PI","floor","door","transparent","alphaMap","displacementMap","displacementScale","metalnessMap","z","bushMaterial","bushGeometry","bush1","scale","bush2","bush3","bush4","graves","graveMaterial","graveGeometry","i","angle","random","radius","sin","cos","grave","castShadow","ambientLight","min","max","step","name","moonLight","doorLight","ghost1","ghost2","ghost3","fog","camera","aspect","updateProjectionMatrix","renderer","setSize","setPixelRatio","devicePixelRatio","controls","OrbitControls","enableDamping","setClearColor","shadowMap","enabled","receiveShadow","type","shadow","mapSize","far","clock","Clock","tick","elapsedTime","getElapsedTime","ghost1Angle","ghost2Angle","ghost3Angle","update","render","requestAnimationFrame","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.333334fc.chunk.js","sourcesContent":["// Haunted House\r\n\r\nimport * as THREE from 'three';\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\r\nimport {Clock} from \"three\";\r\nimport dat from 'dat.gui';\r\n\r\nconst HauntedHouse = () => {\r\n\r\n    const canvas = document.querySelector('.webgl');\r\n\r\n    const gui = new dat.GUI();\r\n    gui.hide()\r\n\r\n    //cursor position\r\n    const cursor = {\r\n        x: 0,\r\n        y: 0\r\n    };\r\n\r\n    const sizes = {\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n    };\r\n\r\n    window.addEventListener('mousemove', (event) => {\r\n        cursor.x = event.clientX / sizes.width - 0.5;\r\n        cursor.y = event.clientY / sizes.height - 0.5;\r\n    });\r\n\r\n    const scene = new THREE.Scene();\r\n\r\n    // -> textures\r\n    const textureLoader = new THREE.TextureLoader();\r\n\r\n    const doorColorTexture = textureLoader.load('/textures/door/color.jpg');\r\n    const doorAlphaTexture = textureLoader.load('/textures/door/alpha.jpg');\r\n    const doorAmbientOcclusionTexture = textureLoader.load('/textures/door/ambientOcclusion.jpg');\r\n    const doorHeightTexture = textureLoader.load('/textures/door/height.jpg');\r\n    const doorNormalTexture = textureLoader.load('/textures/door/normal.jpg');\r\n    const doorMetalnessTexture = textureLoader.load('/textures/door/metalness.jpg');\r\n    const doorRoughnessTexture = textureLoader.load('/textures/door/roughness.jpg');\r\n\r\n    const brickColorTexture = textureLoader.load('/textures/bricks/color.jpg');\r\n    const brickAmbientOcclusionTexture = textureLoader.load('/textures/bricks/ambientOcclusion.jpg');\r\n    const brickNormalTexture = textureLoader.load('/textures/bricks/normal.jpg');\r\n    const brickRoughnessTexture =  textureLoader.load('/textures/bricks/roughness.jpg');\r\n\r\n    const grassColorTexture = textureLoader.load('/textures/grass/color.jpg');\r\n    const grassAmbientOcclusionTexture = textureLoader.load('/textures/grass/ambientOcclusion.jpg');\r\n    const grassNormalTexture = textureLoader.load('/textures/grass/normal.jpg');\r\n    const grassRoughnessTexture =  textureLoader.load('/textures/grass/roughness.jpg');\r\n\r\n    grassColorTexture.wrapS = THREE.RepeatWrapping;\r\n    grassAmbientOcclusionTexture.wrapS = THREE.RepeatWrapping;\r\n    grassNormalTexture.wrapS = THREE.RepeatWrapping;\r\n    grassRoughnessTexture.wrapS = THREE.RepeatWrapping;\r\n\r\n    grassColorTexture.wrapT = THREE.RepeatWrapping;\r\n    grassAmbientOcclusionTexture.wrapT = THREE.RepeatWrapping;\r\n    grassNormalTexture.wrapT = THREE.RepeatWrapping;\r\n    grassRoughnessTexture.wrapT = THREE.RepeatWrapping;\r\n\r\n    grassColorTexture.repeat.set(8, 8)\r\n    grassAmbientOcclusionTexture.repeat.set(8, 8)\r\n    grassNormalTexture.repeat.set(8, 8)\r\n    grassRoughnessTexture.repeat.set(8, 8)\r\n\r\n    const house = new THREE.Group();\r\n    scene.add(house);\r\n\r\n    const walls = new THREE.Mesh(\r\n        new THREE.BoxBufferGeometry(4, 2.5, 4),\r\n        new THREE.MeshStandardMaterial({\r\n            map: brickColorTexture,\r\n            aoMap: brickAmbientOcclusionTexture,\r\n            normalMap: brickNormalTexture,\r\n            roughnessMap: brickRoughnessTexture\r\n        })\r\n    );\r\n    walls.geometry.setAttribute('uv2', new THREE.Float32BufferAttribute(walls.geometry.attributes.uv.array, 2));\r\n\r\n    walls.position.y = 2.25 / 2;\r\n    house.add(walls);\r\n\r\n    const roof = new THREE.Mesh(\r\n        new THREE.ConeBufferGeometry(3.5, 1, 4),\r\n        new THREE.MeshStandardMaterial({color: '#b35f45'})\r\n    );\r\n    roof.position.y = 2.5 + 0.4;\r\n    roof.rotation.y = Math.PI * 0.25;\r\n    house.add(roof)\r\n\r\n    const floor = new THREE.Mesh(\r\n        new THREE.PlaneBufferGeometry(20, 20),\r\n        new THREE.MeshStandardMaterial({\r\n            map: grassColorTexture,\r\n            aoMap: grassAmbientOcclusionTexture,\r\n            normalMap: grassNormalTexture,\r\n            roughnessMap: grassRoughnessTexture\r\n        })\r\n    );\r\n    floor.geometry.setAttribute('uv2', new THREE.Float32BufferAttribute(floor.geometry.attributes.uv.array, 2));\r\n    floor.rotation.x = -Math.PI * 0.5;\r\n    floor.position.y = 0;\r\n    scene.add(floor);\r\n\r\n    const door = new THREE.Mesh(\r\n        new THREE.PlaneBufferGeometry(2.2, 2.2, 100, 100),\r\n        new THREE.MeshStandardMaterial({\r\n            map: doorColorTexture,\r\n            transparent: true,\r\n            alphaMap: doorAlphaTexture,\r\n            aoMap: doorAmbientOcclusionTexture,\r\n            displacementMap: doorHeightTexture,\r\n            displacementScale: 0.1,\r\n            normalMap: doorNormalTexture,\r\n            metalnessMap: doorMetalnessTexture,\r\n            roughnessMap: doorRoughnessTexture\r\n        })\r\n    );\r\n    door.geometry.setAttribute('uv2', new THREE.Float32BufferAttribute(door.geometry.attributes.uv.array, 2));\r\n    door.position.z = 2 + 0.00001;\r\n    door.position.y = 1;\r\n    house.add(door);\r\n\r\n    const bushMaterial = new THREE.MeshStandardMaterial({color: '#89c854'});\r\n    const  bushGeometry= new THREE.SphereBufferGeometry(1, 16, 16);\r\n\r\n    const bush1 = new THREE.Mesh(bushGeometry, bushMaterial);\r\n    bush1.scale.set(0.5, 0.5, 0.5);\r\n    bush1.position.set(0.8, 0.1,2.1);\r\n\r\n    const bush2 = new THREE.Mesh(bushGeometry, bushMaterial);\r\n    bush2.scale.set(0.25, 0.25, 0.25);\r\n    bush2.position.set(1.4, 0.1, 2.1);\r\n\r\n    const bush3 = new THREE.Mesh(bushGeometry, bushMaterial);\r\n    bush3.scale.set(0.4, 0.4, 0.4);\r\n    bush3.position.set(-0.8, 0.1, 2.1);\r\n\r\n    const bush4 = new THREE.Mesh(bushGeometry, bushMaterial);\r\n    bush4.scale.set(0.15, 0.15, 0.15);\r\n    bush4.position.set(-1, 0.05, 2.6);\r\n\r\n    house.add(bush1, bush2, bush3, bush4);\r\n\r\n\r\n    const graves = new THREE.Group();\r\n    scene.add(graves);\r\n\r\n    const graveMaterial = new THREE.MeshStandardMaterial({color: '#b2b6b1'});\r\n    const  graveGeometry = new THREE.BoxBufferGeometry(0.6, 0.8, 0.2);\r\n\r\n    for(let i = 0; i < 50; i ++){\r\n        const angle = Math.random() * Math.PI * 2;\r\n        const radius = 3 + Math.random() * 6;\r\n        const x = Math.sin(angle) * radius;\r\n        const z = Math.cos(angle) * radius;\r\n\r\n        const grave = new THREE.Mesh(graveGeometry, graveMaterial);\r\n        grave.position.set(x, 0.3, z);\r\n        grave.rotation.y = (Math.random() - 0.5) * 0.4;\r\n        grave.rotation.z = (Math.random() - 0.5) * 0.4;\r\n        graves.add(grave);\r\n        grave.castShadow = true\r\n\r\n    }\r\n\r\n    // -> lights\r\n    const ambientLight = new THREE.AmbientLight('#b9d5ff', 0.12);\r\n    // const ambientLight = new THREE.AmbientLight('#ffffff', 0.12);\r\n    gui.add(ambientLight, 'intensity').min(0).max(1).step(0.001).name('ambient Intensity')\r\n    scene.add(ambientLight);\r\n\r\n    const moonLight = new THREE.DirectionalLight('#b9d5ff', 0.12);\r\n    // const moonLight = new THREE.DirectionalLight('#ffffff', 0.12);\r\n    gui.add(moonLight, 'intensity').min(0).max(1).step(0.001).name('directional Int')\r\n    gui.add(moonLight.position, 'x').min(-5).max(5).step(0.001).name('directional x')\r\n    gui.add(moonLight.position, 'y').min(-5).max(5).step(0.001).name('directional y')\r\n    moonLight.position.set(4, 5, -2);\r\n    scene.add(moonLight);\r\n\r\n    const doorLight = new THREE.PointLight('#ff7d46', 1, 7);\r\n    doorLight.position.set(0, 2.2, 2.7);\r\n    house.add(doorLight);\r\n\r\n    // -> ghosts\r\n    const ghost1 = new THREE.PointLight('#ff00ff', 2, 3);\r\n    const ghost2 = new THREE.PointLight('#00ffff', 2, 3);\r\n    const ghost3 = new THREE.PointLight('#ffff00', 2, 3);\r\n\r\n    scene.add(ghost1, ghost2, ghost3);\r\n\r\n    // -> fog\r\n    const fog = new THREE.Fog('#262837', 1, 15);\r\n    scene.fog = fog;\r\n\r\n    const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100);\r\n    camera.position.set(2, 3, 7);\r\n    scene.add(camera);\r\n\r\n    //handle screen resize\r\n    window.addEventListener('resize', () => {\r\n        //update sizes\r\n        sizes.width = window.innerWidth;\r\n        sizes.height = window.innerHeight;\r\n\r\n        //update camera\r\n        camera.aspect = sizes.width / sizes.height;\r\n        camera.updateProjectionMatrix()\r\n\r\n        //update renderer\r\n        renderer.setSize(sizes.width, sizes.height);\r\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n    });\r\n\r\n\r\n    const controls = new OrbitControls(camera, canvas);\r\n    controls.enableDamping = true;\r\n\r\n    const renderer = new THREE.WebGLRenderer({\r\n        canvas: canvas\r\n    });\r\n    renderer.setSize(sizes.width, sizes.height);\r\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n    renderer.setClearColor('#262837');\r\n\r\n    // -> shadows\r\n    renderer.shadowMap.enabled = true;\r\n    moonLight.castShadow = true;\r\n    doorLight.castShadow = true;\r\n    ghost1.castShadow = true;\r\n    ghost2.castShadow = true;\r\n    ghost3.castShadow = true;\r\n\r\n    walls.castShadow = true;\r\n    bush1.castShadow = true;\r\n    bush2.castShadow = true;\r\n    bush3.castShadow = true;\r\n    bush4.castShadow = true;\r\n\r\n    floor.receiveShadow = true;\r\n\r\n    // -> optimise shadow quality\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n\r\n    doorLight.shadow.mapSize.width = 256;\r\n    doorLight.shadow.mapSize.height = 256;\r\n    doorLight.shadow.camera.far = 7;\r\n\r\n    ghost1.shadow.mapSize.width = 256;\r\n    ghost1.shadow.mapSize.height = 256;\r\n    ghost1.shadow.camera.far = 7;\r\n\r\n    ghost2.shadow.mapSize.width = 256;\r\n    ghost2.shadow.mapSize.height = 256;\r\n    ghost2.shadow.camera.far = 7;\r\n\r\n    ghost3.shadow.mapSize.width = 256;\r\n    ghost3.shadow.mapSize.height = 256;\r\n    ghost3.shadow.camera.far = 7;\r\n\r\n    const clock = new Clock();\r\n\r\n    const tick = () => {\r\n        const elapsedTime = clock.getElapsedTime();\r\n\r\n        // -> animate ghosts\r\n        const ghost1Angle = elapsedTime * 0.5;\r\n        ghost1.position.x = Math.cos(ghost1Angle) * 4;\r\n        ghost1.position.z = Math.sin(ghost1Angle) * 4;\r\n        ghost1.position.y = Math.sin(elapsedTime * 3);\r\n\r\n        const ghost2Angle = - elapsedTime * 0.5;\r\n        ghost2.position.x = Math.cos(ghost2Angle) * 5;\r\n        ghost2.position.z = Math.sin(ghost2Angle) * 5;\r\n        ghost2.position.y = Math.sin(elapsedTime * 4) + Math.sin(elapsedTime * 2.5);\r\n\r\n        const ghost3Angle = - elapsedTime * 0.18;\r\n        ghost3.position.x = Math.cos(ghost3Angle) * (7 + Math.sin(elapsedTime * 0.32));\r\n        ghost3.position.z = Math.sin(ghost3Angle) * (7 + Math.sin(elapsedTime * 0.5));\r\n        ghost3.position.y = Math.sin(elapsedTime * 4) + Math.sin(elapsedTime * 2.5);;\r\n\r\n        controls.update();\r\n        renderer.render(scene, camera);\r\n        window.requestAnimationFrame(tick);\r\n    };\r\n\r\n    tick();\r\n\r\n    return (\r\n        <>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default HauntedHouse;","import './App.css';\nimport HauntedHouse from \"./Components/HauntedHouse\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HauntedHouse />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}